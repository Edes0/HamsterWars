@page "/HamsterWins/{Id:int}"

@inject IBattleData _bd
@inject IHamsterData _db


<h3>Battle History</h3>

@if (displayBattles is null)
{
    <p><em>Loading...</em></p>
}
else
{
     <img src="/Images/@displayHamster.ImageName" alt="Avatar" style="width:600px;height:400px;">
      <h1>Name: @displayHamster.Name</h1>
      <p>Favourite Food: @displayHamster.FavouriteFood</p>
      <p>Favourite Activity: @displayHamster.FavouriteActivity</p>
      <p>Wins: @displayHamster.Wins</p>
      <p>Defeats: @displayHamster.Defeats</p>
      <p>Games: @displayHamster.Games</p>
      <hr />


      <h3>Won battles: </h3>
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Time</th>
                <th>Winner</th>
                <th>Loser</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var battle in displayBattles)
            {
                <tr>
                    <td>@battle.Date</td>
                    <td>@displayHamster.Name</td>
                    <td>@GetLoser(battle.Loser_ID).Name</td>
                </tr>
            }
        </tbody>
    </table>

}

@code {
    [Parameter]
    public int Id { get; set; }
    private HamsterModel? hamsterModel;
    private DisplayHamsterModel? displayHamster;
    private List<BattleModel>? battles;
    private List<DisplayBattleModel>? displayBattles;
    private List<HamsterModel>? hamsters;


    protected override async Task OnInitializedAsync()
    {
        battles = await _bd.GetBattles();
        hamsters = await _db.GetHamsters();

        displayBattles = ModelConverter.ToDisplayBattleModelList(battles).OrderByDescending(s => s.Date).Where(s => s.Winner_ID == Id).ToList();
        displayHamster = GetWinner(Id);
           
        StateHasChanged();
    }

        private DisplayHamsterModel GetWinner(int Id)
    {
        hamsterModel = hamsters.Where(s => s.ID == Id).Single();

        return ModelConverter.ToDisplayHamsterModel(hamsterModel);
    }

    private DisplayHamsterModel GetLoser(int LoserID)
    {
        hamsterModel = hamsters.Where(s => s.ID == LoserID).Single();

        return ModelConverter.ToDisplayHamsterModel(hamsterModel);
    }


}