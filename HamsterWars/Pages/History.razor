@page "/History"

@inject IHamsterData _db
@inject ISqlDataAccess _context
@inject IBattleData _bd
@inject NavigationManager _nav


<h3>History</h3>

@if (displayBattles is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Time</th>
                <th>Winner</th>
                <th>Loser</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var battle in displayBattles)
            {
                <tr>
                    <td>@battle.Date</td>
                    <td>@GetHamster.Get(battle.Winner_ID, hamsters).Name</td>
                    <td>@GetHamster.Get(battle.Loser_ID, hamsters).Name</td>
                    <td><button type="button" @onclick="(() => RemoveBattle(ModelConverter.ToBattleModel(battle)))" class="btn btn-danger">REMOVE</button></td>
                </tr>
            }
        </tbody>
    </table>

}

@code {
    private DisplayHamsterModel? displayHamster;
    private List<HamsterModel>? hamsters;
    private List<DisplayHamsterModel>? displayHamsters;
    private List<BattleModel>? battles;
    private List<DisplayBattleModel>? displayBattles;


    protected override async Task OnInitializedAsync()
    {
        hamsters = await _db.GetHamsters();

        battles = await _bd.GetBattles();

        displayBattles = ModelConverter.ToDisplayBattleModelList(battles).OrderByDescending(s => s.Date).ToList();

        StateHasChanged();
    }

    private async Task RemoveBattle(BattleModel battleModel)
    {
        await _bd.RemoveBattle(battleModel);

         _nav.NavigateTo(_nav.Uri, forceLoad: true);
    }
}
